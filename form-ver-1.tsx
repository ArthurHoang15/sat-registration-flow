// @ts-nocheck
import React, { useState, useCallback, useMemo, useRef, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { addPropertyControls, ControlType } from "framer"
import { useMeasuredSize } from "https://framer.com/m/framer/useMeasuredSize.js"

/**
 * @framerDisableUnlink
 */
export default function QASLeadManagementForm(props) {
    const {
        supabaseUrl = "https://gzgebiosasfyzwwkrsof.supabase.co",
        supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd6Z2ViaW9zYXNmeXp3d2tyc29mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwNTg4NjcsImV4cCI6MjA3NDYzNDg2N30.XNI4MJecZPAK87i8I1pHoiAYBcYNDZcCoEjaikPuA60",
        n8nUrl = "https://n8n-280z.onrender.com",
        style,
    } = props

    const containerRef = useRef(null)
    const measured = useMeasuredSize(containerRef)

    // Responsive breakpoints
    const isMobile = measured?.width && measured.width < 640
    const isTablet =
        measured?.width && measured.width >= 640 && measured.width < 1024
    const isDesktop = measured?.width && measured.width >= 1024

    // Dynamic spacing based on screen size
    const spacing = {
        container: isMobile
            ? "20px 16px"
            : isTablet
              ? "40px 24px"
              : "60px 32px",
        section: isMobile ? "16px" : isTablet ? "24px" : "32px",
        element: isMobile ? "12px" : isTablet ? "16px" : "20px",
        header: isMobile ? "24px" : isTablet ? "32px" : "40px",
        formContent: isMobile ? "16px" : isTablet ? "20px" : "24px",
    }

    // Dynamic font sizes
    const fontSize = {
        title: isMobile ? "24px" : isTablet ? "28px" : "32px",
        subtitle: isMobile ? "14px" : isTablet ? "16px" : "18px",
        heading: isMobile ? "18px" : isTablet ? "20px" : "22px",
        body: isMobile ? "14px" : isTablet ? "15px" : "16px",
        small: isMobile ? "12px" : "13px",
    }

    // Simple priority scoring (no complex logic)
    const calculatePriorityScore = (formData) => {
        let score = 0

        // Base score from form completion
        const requiredFields = [
            "firstName",
            "lastName",
            "email",
            "phone",
            "course",
            "schedule",
        ]
        const completedFields = requiredFields.filter(
            (field) => formData[field] && formData[field].trim() !== ""
        )
        score += (completedFields.length / requiredFields.length) * 40

        // Additional data quality points
        if (formData.satScore && parseInt(formData.satScore) > 0) score += 10
        if (formData.birthYear && parseInt(formData.birthYear) > 1990)
            score += 5
        if (formData.school && formData.school.trim() !== "") score += 5
        if (formData.targetScore && parseInt(formData.targetScore) >= 1400)
            score += 10
        if (formData.contactMethods && formData.contactMethods.length > 0)
            score += 5
        if (formData.learningPurpose && formData.learningPurpose !== "")
            score += 10
        if (formData.testDate && formData.testDate !== "") score += 10
        if (formData.discoverySource && formData.discoverySource !== "")
            score += 5

        // Determine priority level
        if (score >= 100) return { level: 1, label: "Ready to Enroll", score }
        if (score >= 85) return { level: 2, label: "Urgency High", score }
        if (score >= 65) return { level: 3, label: "Experience", score }
        if (score >= 45) return { level: 4, label: "Unclear Need", score }
        if (score >= 25) return { level: 5, label: "Awareness", score }
        return { level: 6, label: "New Lead", score }
    }

    // Engagement pools
    const engagementPools = {
        sales: {
            name: "Sales Pool (Enroll Now)",
            description: "Direct conversion pool for immediate enrollment",
            color: "#dc2626",
            icon: "üéØ",
        },
        consulting: {
            name: "Consulting Pool (Book Call)",
            description: "Personalized guidance and consultation",
            color: "#ea580c",
            icon: "üìû",
        },
        experience: {
            name: "Experience Pool (Demo + Free Material)",
            description: "Product experience and free resources",
            color: "#d97706",
            icon: "üéÆ",
        },
        nurture: {
            name: "Nurture Pool (Long-term tips + soft CTA)",
            description: "Long-term engagement with valuable content",
            color: "#059669",
            icon: "üå±",
        },
        education: {
            name: "Education Pool (SAT Basics)",
            description: "Educational content and SAT basics",
            color: "#0891b2",
            icon: "üìö",
        },
        giveaway: {
            name: "Giveaway Pool (Community + Freebies)",
            description: "Community access and freebies",
            color: "#7c3aed",
            icon: "üéÅ",
        },
    }

    // Simple engagement pool determination
    const determineEngagementPool = (priority) => {
        const { level } = priority

        if (level === 1) return "sales"
        if (level === 2) return "consulting"
        if (level === 3) return "experience"
        if (level === 4) return "education"
        if (level === 5) return "education"
        return "nurture"
    }

    const [currentStep, setCurrentStep] = useState(1)
    const [isSubmitting, setIsSubmitting] = useState(false)
    const [submitSuccess, setSubmitSuccess] = useState(false)
    const [errors, setErrors] = useState<any>({})
    const [rateLimitError, setRateLimitError] = useState("")
    const [formData, setFormData] = useState({
        // Step 1: Course & Schedule
        course: "",
        schedule: "",
        satScore: "",
        voucherCode: "",

        // Step 2: Personal Info
        firstName: "",
        lastName: "",
        birthYear: "",
        email: "",
        phone: "",
        facebookLink: "",

        // Step 3: Location & School
        country: "",
        customCountry: "",
        state: "",
        school: "",

        // Step 4: Preferences & Goals
        discoverySource: "",
        contactMethods: [],
        learningPurpose: "",
        customLearningPurpose: "",
        testDate: "",
        targetScore: 1400,
    })

    // Calculate priority and pool for display (simple calculation)
    const priorityData = calculatePriorityScore(formData)
    const engagementPool = determineEngagementPool(priorityData)

    // Complete country list from the map with Vietnamese names
    const locationData = {
        Canada: {
            states: [
                "Alberta",
                "British Columbia",
                "Manitoba",
                "New Brunswick",
                "Newfoundland and Labrador",
                "Northwest Territories",
                "Nova Scotia",
                "Nunavut",
                "Ontario",
                "Prince Edward Island",
                "Quebec",
                "Saskatchewan",
                "Yukon",
            ],
        },
        "Hoa K·ª≥": {
            states: [
                "Alabama",
                "Alaska",
                "Arizona",
                "Arkansas",
                "California",
                "Colorado",
                "Connecticut",
                "Delaware",
                "Florida",
                "Georgia",
                "Hawaii",
                "Idaho",
                "Illinois",
                "Indiana",
                "Iowa",
                "Kansas",
                "Kentucky",
                "Louisiana",
                "Maine",
                "Maryland",
                "Massachusetts",
                "Michigan",
                "Minnesota",
                "Mississippi",
                "Missouri",
                "Montana",
                "Nebraska",
                "Nevada",
                "New Hampshire",
                "New Jersey",
                "New Mexico",
                "New York",
                "North Carolina",
                "North Dakota",
                "Ohio",
                "Oklahoma",
                "Oregon",
                "Pennsylvania",
                "Rhode Island",
                "South Carolina",
                "South Dakota",
                "Tennessee",
                "Texas",
                "Utah",
                "Vermont",
                "Virginia",
                "Washington",
                "West Virginia",
                "Wisconsin",
                "Wyoming",
                "District of Columbia",
            ],
        },
        "Vi·ªát Nam": {
            states: [
                "H√† N·ªôi",
                "H·ªì Ch√≠ Minh",
                "An Giang",
                "B√† R·ªãa - V≈©ng T√†u",
                "B·∫Øc Giang",
                "B·∫Øc K·∫°n",
                "B·∫°c Li√™u",
                "B·∫Øc Ninh",
                "B·∫øn Tre",
                "B√¨nh ƒê·ªãnh",
                "B√¨nh D∆∞∆°ng",
                "B√¨nh Ph∆∞·ªõc",
                "B√¨nh Thu·∫≠n",
                "C√† Mau",
                "Cao B·∫±ng",
                "ƒê·∫Øk L·∫Øk",
                "ƒê·∫Øk N√¥ng",
                "ƒêi·ªán Bi√™n",
                "ƒê·ªìng Nai",
                "ƒê·ªìng Th√°p",
                "Gia Lai",
                "H√† Giang",
                "H√† Nam",
                "H√† Tƒ©nh",
                "H·∫£i D∆∞∆°ng",
                "H·∫≠u Giang",
                "H√≤a B√¨nh",
                "H∆∞ng Y√™n",
                "Kh√°nh H√≤a",
                "Ki√™n Giang",
                "Kon Tum",
                "Lai Ch√¢u",
                "L√¢m ƒê·ªìng",
                "L·∫°ng S∆°n",
                "L√†o Cai",
                "Long An",
                "Nam ƒê·ªãnh",
                "Ngh·ªá An",
                "Ninh B√¨nh",
                "Ninh Thu·∫≠n",
                "Ph√∫ Th·ªç",
                "Qu·∫£ng B√¨nh",
                "Qu·∫£ng Nam",
                "Qu·∫£ng Ng√£i",
                "Qu·∫£ng Ninh",
                "Qu·∫£ng Tr·ªã",
                "S√≥c TrƒÉng",
                "S∆°n La",
                "T√¢y Ninh",
                "Th√°i B√¨nh",
                "Th√°i Nguy√™n",
                "Thanh H√≥a",
                "Th·ª´a Thi√™n Hu·∫ø",
                "Ti·ªÅn Giang",
                "Tr√† Vinh",
                "Tuy√™n Quang",
                "Vƒ©nh Long",
                "Vƒ©nh Ph√∫c",
                "Y√™n B√°i",
                "Ph√∫ Y√™n",
                "C·∫ßn Th∆°",
                "ƒê√† N·∫µng",
                "H·∫£i Ph√≤ng",
            ],
        },
        √öc: {
            states: [
                "Australian Capital Territory",
                "New South Wales",
                "Northern Territory",
                "Queensland",
                "South Australia",
                "Tasmania",
                "Victoria",
                "Western Australia",
            ],
        },
    }

    const countries = [
        "Canada",
        "Hoa K·ª≥",
        "V∆∞∆°ng qu·ªëc Anh",
        "H√† Lan",
        "Ph√°p",
        "ƒê·ª©c",
        "Ph·∫ßn Lan",
        "Nga",
        "Trung Qu·ªëc",
        "H√†n Qu·ªëc",
        "Vi·ªát Nam",
        "Th√°i Lan",
        "Malaysia",
        "Singapore",
        "√öc",
        "Kh√°c",
    ]

    // Simple rate limiting (no localStorage)
    const RATE_LIMIT_WINDOW = 15 * 60 * 1000 // 15 minutes
    const MAX_SUBMISSIONS = 3 // Max submissions per window
    const STORAGE_KEY = "qas_form_submissions"

    // Simple submission data preparation
    const prepareSubmissionData = (formData, isCompleted = false) => {
        const priority = calculatePriorityScore(formData)
        const pool = determineEngagementPool(priority)

        return {
            course: formData.course || "",
            schedule: formData.schedule || "",
            sat_score:
                formData.satScore && formData.satScore.trim() !== ""
                    ? parseInt(formData.satScore)
                    : null,
            voucher_code: formData.voucherCode || "",
            first_name: formData.firstName ? formData.firstName.trim() : "",
            last_name: formData.lastName ? formData.lastName.trim() : "",
            birth_year: formData.birthYear
                ? parseInt(formData.birthYear)
                : null,
            email: formData.email ? formData.email.trim() : "",
            phone: formData.phone ? formData.phone.trim() : "",
            facebook_link: formData.facebookLink || "",
            country:
                formData.country === "Kh√°c"
                    ? formData.customCountry
                        ? formData.customCountry.trim()
                        : ""
                    : formData.country || "",
            state: formData.state ? formData.state.trim() : "",
            school: formData.school ? formData.school.trim() : "",
            discovery_source: formData.discoverySource || "",
            contact_methods: Array.isArray(formData.contactMethods)
                ? formData.contactMethods.join(", ")
                : "",
            learning_purpose:
                formData.learningPurpose === "Other"
                    ? formData.customLearningPurpose
                        ? formData.customLearningPurpose.trim()
                        : ""
                    : formData.learningPurpose || "",
            test_date: formData.testDate || "",
            target_score: formData.targetScore || 1400,
            is_completed: isCompleted,
            is_qualified: !!(
                formData.firstName?.trim() &&
                formData.lastName?.trim() &&
                formData.birthYear &&
                formData.email?.trim() &&
                formData.phone?.trim()
            ),
            // Lead management fields
            priority_level: priority.level,
            priority_score: priority.score,
            priority_label: priority.label,
            engagement_pool: pool,
            pool_name: engagementPools[pool]?.name || "",
            pool_description: engagementPools[pool]?.description || "",
            updated_at: new Date().toISOString(),
        }
    }

    // Simple rate limiting (no localStorage)
    const checkRateLimit = () => {
        try {
            const stored = localStorage.getItem(STORAGE_KEY)
            const submissions = stored ? JSON.parse(stored) : []
            const now = Date.now()
            const recent = submissions.filter(
                (t) => now - t < RATE_LIMIT_WINDOW
            )
            localStorage.setItem(STORAGE_KEY, JSON.stringify(recent))
            return recent.length < MAX_SUBMISSIONS
        } catch {
            return true
        }
    }

    const recordSubmission = () => {
        try {
            const stored = localStorage.getItem(STORAGE_KEY)
            const submissions = stored ? JSON.parse(stored) : []
            submissions.push(Date.now())
            localStorage.setItem(STORAGE_KEY, JSON.stringify(submissions))
        } catch {}
    }

    const getRemainingTime = () => {
        try {
            const stored = localStorage.getItem(STORAGE_KEY)
            const submissions = stored ? JSON.parse(stored) : []
            const now = Date.now()
            const within = submissions.filter(
                (t) => now - t < RATE_LIMIT_WINDOW
            )
            if (within.length === 0) return 0
            const oldest = Math.min(...within)
            return Math.max(
                0,
                Math.ceil((RATE_LIMIT_WINDOW - (now - oldest)) / 60000)
            )
        } catch {
            return 0
        }
    }

    const updateFormData = (field, value) => {
        setFormData((prev) => ({ ...prev, [field]: value }))
        if (errors[field])
            setErrors((prev) => ({ ...prev, [field]: undefined }))
        if (rateLimitError) setRateLimitError("")
    }

    // Validation
    const validateEmail = (email) => {
        if (!email || typeof email !== "string") return false
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        return emailRegex.test(email.trim())
    }
    const validatePhone = (phone) => {
        if (!phone || typeof phone !== "string") return false
        const clean = phone.replace(/\s/g, "")
        const phoneRegex = /^[0-9+\-\s\(\)]{10,15}$/
        return phoneRegex.test(clean) && clean.length >= 10
    }
    const validateYear = (year) => {
        if (!year) return false
        const currentYear = new Date().getFullYear()
        const num = parseInt(year)
        return !isNaN(num) && num >= 1990 && num <= currentYear - 10
    }
    const validateSatScore = (score) => {
        if (!score && score !== 0) return true
        const num = parseInt(score)
        return !isNaN(num) && num >= 400 && num <= 1600
    }
    const validateStep = (step) => {
        const newErrors = {}
        switch (step) {
            case 1:
                if (!formData.course)
                    newErrors.course = "Vui l√≤ng ch·ªçn kh√≥a h·ªçc"
                if (!formData.schedule)
                    newErrors.schedule = "Vui l√≤ng ch·ªçn khung gi·ªù h·ªçc"
                if (formData.satScore && !validateSatScore(formData.satScore))
                    newErrors.satScore = "ƒêi·ªÉm SAT ph·∫£i t·ª´ 400 ƒë·∫øn 1600"
                break
            case 2:
                if (!formData.firstName?.trim())
                    newErrors.firstName = "Vui l√≤ng nh·∫≠p h·ªç"
                if (!formData.lastName?.trim())
                    newErrors.lastName = "Vui l√≤ng nh·∫≠p t√™n"
                if (!formData.birthYear)
                    newErrors.birthYear = "Vui l√≤ng nh·∫≠p nƒÉm sinh"
                else if (!validateYear(formData.birthYear))
                    newErrors.birthYear = "NƒÉm sinh kh√¥ng h·ª£p l·ªá"
                if (!formData.email?.trim())
                    newErrors.email = "Vui l√≤ng nh·∫≠p email"
                else if (!validateEmail(formData.email))
                    newErrors.email = "Email kh√¥ng h·ª£p l·ªá"
                if (!formData.phone?.trim())
                    newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                else if (!validatePhone(formData.phone))
                    newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
                if (
                    formData.facebookLink &&
                    formData.facebookLink.trim() !== "" &&
                    !formData.facebookLink.includes("facebook.com")
                )
                    newErrors.facebookLink = "Link Facebook kh√¥ng h·ª£p l·ªá"
                break
            case 3:
                if (!formData.country)
                    newErrors.country = "Vui l√≤ng ch·ªçn qu·ªëc gia"
                if (
                    formData.country === "Kh√°c" &&
                    !formData.customCountry?.trim()
                )
                    newErrors.customCountry = "Vui l√≤ng nh·∫≠p t√™n qu·ªëc gia"
                if (!formData.state?.trim())
                    newErrors.state = "Vui l√≤ng nh·∫≠p t·ªânh th√†nh / bang"
                if (!formData.school?.trim())
                    newErrors.school = "Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªùng"
                if (!formData.discoverySource)
                    newErrors.discoverySource = "Vui l√≤ng ch·ªçn ngu·ªìn th√¥ng tin"
                if (
                    !formData.contactMethods ||
                    formData.contactMethods.length === 0
                )
                    newErrors.contactMethods =
                        "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt h√¨nh th·ª©c li√™n h·ªá"
                break
            case 4:
                if (!formData.learningPurpose)
                    newErrors.learningPurpose = "Vui l√≤ng ch·ªçn m·ª•c ƒë√≠ch h·ªçc"
                if (
                    formData.learningPurpose === "Other" &&
                    !formData.customLearningPurpose?.trim()
                )
                    newErrors.customLearningPurpose =
                        "Vui l√≤ng nh·∫≠p m·ª•c ƒë√≠ch h·ªçc"
                if (!formData.testDate)
                    newErrors.testDate = "Vui l√≤ng ch·ªçn th·ªùi gian thi"
                break
        }
        setErrors(newErrors)
        return Object.keys(newErrors).length === 0
    }

    // Options (mirrored)
    const courseOptions = [
        {
            value: "Pre-SAT",
            label: "Kh√≥a Pre-SAT",
            desc: "ƒê·∫ßu ra 1100+, n·∫Øm ƒë∆∞·ª£c to√†n b·ªô ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ SAT",
        },
        {
            value: "SAT Beginner",
            label: "Kh√≥a SAT Beginner",
            desc: "ƒê·∫ßu ra 1300-1400, t·ªïng √¥n ki·∫øn th·ª©c tr·ªçng t√¢m",
        },
        {
            value: "SAT Sprint",
            label: "Kh√≥a SAT Sprint",
            desc: "ƒê·∫ßu ra 1450+ SAT, t·∫≠p trung v√†o gi·∫£i ƒë·ªÅ",
        },
        {
            value: "SAT 1-1",
            label: "Kh√≥a SAT 1-1",
            desc: "H·ªçc ri√™ng 1:1 v·ªõi gi√°o vi√™n",
        },
    ]
    const scheduleOptions = [
        "T·ªëi Th·ª© 2, Th·ª© 6: 19h30 - 21h30",
        "T·ªëi Th·ª© 2, Th·ª© 4: 19h30 - 21h30",
        "T·ªëi Th·ª© 3, Th·ª© 6: 19h30 - 21h30",
        "T·ªëi Th·ª© 3, Th·ª© 5: 19h30 - 21h30",
        "S√°ng Th·ª© 7, Ch·ªß Nh·∫≠t: 10h00 - 12h00",
        "Chi·ªÅu Th·ª© 7, Ch·ªß Nh·∫≠t: 17h30 - 19h30",
        "T·ªëi Th·ª© 7, Ch·ªß Nh·∫≠t: 20h00 - 22h00",
    ]
    const discoveryOptions = [
        "D·ª± √°n, s·ª± ki·ªán, c√¢u l·∫°c b·ªô, t·ªï ch·ª©c",
        "Thread QAS Academy",
        "Tiktok QAS Academy",
        "Facebook QAS Academy",
        "Instagram QAS Academy",
        "Ph·ª• huynh gi·ªõi thi·ªáu",
        "H·ªçc vi√™n gi·ªõi thi·ªáu",
        "Social media c·ªßa Qu·ªëc An",
        "Comment c·ªßa t∆∞ v·∫•n vi√™n Ng·ªçc Anh",
    ]
    const contactMethodOptions = [
        { value: "facebook", label: "Facebook" },
        { value: "zalo/sdt", label: "Zalo / ƒêi·ªán tho·∫°i" },
    ]

    const toggleContactMethod = (method) => {
        const methods = formData.contactMethods
        if (methods.includes(method)) {
            updateFormData(
                "contactMethods",
                methods.filter((m) => m !== method)
            )
        } else {
            updateFormData("contactMethods", [...methods, method])
        }
    }
    const handleCountryChange = (country) => {
        updateFormData("country", country)
        updateFormData("state", "")
        if (country !== "Kh√°c") updateFormData("customCountry", "")
    }
    const handleLearningPurposeChange = (p) => {
        updateFormData("learningPurpose", p)
        if (p !== "Other") updateFormData("customLearningPurpose", "")
    }
    const availableStates = useMemo(() => {
        if (formData.country && locationData[formData.country]) {
            return locationData[formData.country].states
        }
        return []
    }, [formData.country])

    // Simple submit function
    const submitForm = async () => {
        if (isSubmitting) return
        if (!validateStep(4)) return
        if (!checkRateLimit()) {
            const mins = getRemainingTime()
            setRateLimitError(
                `B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu bi·ªÉu m·∫´u. Vui l√≤ng th·ª≠ l·∫°i sau ${mins} ph√∫t.`
            )
            return
        }

        setIsSubmitting(true)
        setRateLimitError("")

        const submissionData = prepareSubmissionData(formData, true)

        try {
            console.log("Submitting form data:", submissionData)

            // Submit to Supabase
            const supabaseResponse = await fetch(
                `${supabaseUrl}/rest/v1/qas_registrations`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        apikey: supabaseAnonKey,
                        Authorization: `Bearer ${supabaseAnonKey}`,
                        Prefer: "return=minimal",
                    },
                    body: JSON.stringify({
                        ...submissionData,
                        created_at: new Date().toISOString(),
                    }),
                }
            )

            console.log("Supabase response status:", supabaseResponse.status)

            if (!supabaseResponse.ok) {
                const errorText = await supabaseResponse.text()
                console.error("Supabase error response:", errorText)
                throw new Error(
                    `Supabase request failed: ${supabaseResponse.status} - ${errorText}`
                )
            }

            // Send to N8N webhook (optional, don't fail if this fails)
            try {
                const n8nResponse = await fetch(
                    `${n8nUrl}/webhook/90dc17a4-8930-4a5a-a473-457d99044e33`,
                    {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            ...submissionData,
                            submission_type: "completed",
                        }),
                    }
                )

                if (!n8nResponse.ok) {
                    console.warn(
                        "N8N webhook failed, but continuing since Supabase succeeded"
                    )
                } else {
                    console.log("N8N webhook success")
                }
            } catch (webhookError) {
                console.error("N8N webhook error:", webhookError)
                // Don't throw error for N8N failure since Supabase succeeded
            }

            recordSubmission()
            setSubmitSuccess(true)
        } catch (error) {
            console.error("Submission error:", error)
            alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!")
        } finally {
            setIsSubmitting(false)
        }
    }

    const nextStep = () => {
        if (validateStep(currentStep) && currentStep < 4)
            setCurrentStep(currentStep + 1)
    }
    const prevStep = () => {
        if (currentStep > 1) setCurrentStep(currentStep - 1)
    }

    const startNewForm = () => {
        setFormData({
            course: "",
            schedule: "",
            satScore: "",
            voucherCode: "",
            firstName: "",
            lastName: "",
            birthYear: "",
            email: "",
            phone: "",
            facebookLink: "",
            country: "",
            customCountry: "",
            state: "",
            school: "",
            discoverySource: "",
            contactMethods: [],
            learningPurpose: "",
            customLearningPurpose: "",
            testDate: "",
            targetScore: 1400,
        })
        setCurrentStep(1)
        setSubmitSuccess(false)
        setErrors({})
        setRateLimitError("")
    }

    // UI helpers
    const PoolBadge = ({ pool }) => {
        if (!pool) return null
        const meta = engagementPools[pool] || {}
        return (
            <div
                style={{
                    display: "inline-flex",
                    alignItems: "center",
                    gap: 8,
                    padding: "6px 10px",
                    borderRadius: 999,
                    background: "#f3f4f6",
                    color: "#111827",
                    border: `1px solid #e5e7eb`,
                }}
            >
                <span style={{ fontSize: 16 }}>{meta.icon || ""}</span>
                <span style={{ fontWeight: 700, fontSize: 13 }}>
                    {meta.name || pool}
                </span>
            </div>
        )
    }

    if (submitSuccess) {
        return (
            <div
                style={{
                    ...style,
                    width: "100%",
                    minHeight: "400px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "40px 20px",
                    background: "white",
                    marginTop: 60,
                }}
            >
                <motion.div
                    style={{
                        background: "white",
                        borderRadius: "20px",
                        padding: "60px",
                        textAlign: "center",
                        maxWidth: "600px",
                        width: "100%",
                        boxShadow: "0 20px 40px rgba(0,74,173,0.1)",
                        border: "1px solid #e5e5e5",
                    }}
                    initial={{ scale: 0.8, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ duration: 0.5 }}
                >
                    <div style={{ fontSize: "64px", marginBottom: "24px" }}>
                        üéâ
                    </div>
                    <h1
                        style={{
                            color: "#004aad",
                            fontSize: "32px",
                            marginBottom: "16px",
                            fontWeight: "700",
                        }}
                    >
                        ƒêƒÉng k√Ω th√†nh c√¥ng!
                    </h1>
                    <p
                        style={{
                            color: "#666",
                            fontSize: "18px",
                            lineHeight: "1.6",
                            marginBottom: "24px",
                        }}
                    >
                        C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω h·ªçc th·ª≠ t·∫°i QAS Academy. <br />
                        Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t!
                    </p>
                    <div
                        style={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "16px",
                        }}
                    >
                        <motion.button
                            onClick={() =>
                                window.open(
                                    "https://www.facebook.com/messages/t/108905614033440",
                                    "_blank"
                                )
                            }
                            style={{
                                background: "#004aad",
                                color: "white",
                                border: "none",
                                padding: "16px 24px",
                                borderRadius: "12px",
                                fontSize: "16px",
                                fontWeight: "600",
                                cursor: "pointer",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                gap: "8px",
                                width: "100%",
                                transition: "all 0.3s ease",
                                boxShadow: "0 4px 12px rgba(24, 119, 242, 0.3)",
                            }}
                            whileHover={{
                                scale: 1.02,
                                boxShadow: "0 6px 16px rgba(24, 119, 242, 0.4)",
                            }}
                            whileTap={{ scale: 0.98 }}
                        >
                            üì± Nh·∫Øn x√°c nh·∫≠n cho Fanpage QAS ngay!
                        </motion.button>
                        <motion.button
                            onClick={startNewForm}
                            style={{
                                background: "transparent",
                                color: "#004aad",
                                border: "2px solid #004aad",
                                padding: "16px 24px",
                                borderRadius: "12px",
                                fontSize: "16px",
                                fontWeight: "600",
                                cursor: "pointer",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                gap: "8px",
                                width: "100%",
                                transition: "all 0.3s ease",
                            }}
                            whileHover={{ scale: 1.02, background: "#f0f7ff" }}
                            whileTap={{ scale: 0.98 }}
                        >
                            ‚ûï ƒêƒÉng k√Ω th√™m kh√≥a h·ªçc kh√°c
                        </motion.button>
                    </div>
                </motion.div>
            </div>
        )
    }

    return (
        <div
            ref={containerRef}
            style={{
                ...style,
                width: "100%",
                marginTop: 60,
                minHeight: "auto",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                padding: spacing.container,
                background: "white",
            }}
        >
            <motion.div
                style={{
                    background: "white",
                    borderRadius: isMobile ? "16px" : "20px",
                    width: "100%",
                    maxWidth: isMobile ? "100%" : isTablet ? "700px" : "1000px",
                    boxShadow: isMobile
                        ? "0 8px 24px rgba(0,74,173,0.08)"
                        : "0 20px 60px rgba(0,74,173,0.1)",
                    border: "1px solid #e5e5e5",
                    overflow: "hidden",
                }}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
            >
                {/* Header */}
                <div
                    style={{
                        background:
                            "linear-gradient(135deg, #004aad 0%, #0066cc 100%)",
                        padding: isMobile
                            ? "24px 20px 20px 20px"
                            : isTablet
                              ? "32px 32px 24px 32px"
                              : "40px 40px 30px 40px",
                        color: "white",
                        textAlign: "center",
                    }}
                >
                    <h1
                        style={{
                            fontSize: fontSize.title,
                            margin: "0 0 8px 0",
                            fontWeight: "700",
                            lineHeight: "1.2",
                        }}
                    >
                        QAS Academy
                    </h1>
                    <p
                        style={{
                            margin: "0",
                            opacity: "0.9",
                            fontSize: fontSize.subtitle,
                            lineHeight: "1.4",
                        }}
                    >
                        H·ªçc v√† Thi Th·ª≠ SAT Mi·ªÖn Ph√≠ C√πng QAS Academy
                    </p>
                    <div
                        style={{
                            marginTop: 12,
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            gap: 12,
                            flexWrap: "wrap",
                        }}
                    >
                        {priorityData && (
                            <div
                                style={{
                                    padding: "6px 10px",
                                    background: "#ffffff20",
                                    border: "1px solid #ffffff40",
                                    borderRadius: 999,
                                    fontWeight: 700,
                                    fontSize: 13,
                                }}
                            >
                                ∆Øu ti√™n: {priorityData.level} ‚Ä¢ ƒêi·ªÉm:{" "}
                                {Math.round(priorityData.score)} ‚Ä¢{" "}
                                {priorityData.label}
                            </div>
                        )}
                        <PoolBadge pool={engagementPool} />
                    </div>
                </div>

                {/* Progress & Steps */}
                <div
                    style={{
                        padding: isMobile
                            ? "24px 20px 16px 20px"
                            : isTablet
                              ? "32px 32px 20px 32px"
                              : "40px 40px 20px 40px",
                    }}
                >
                    <div
                        style={{
                            marginBottom: isMobile
                                ? "24px"
                                : isTablet
                                  ? "32px"
                                  : "40px",
                            width: "100%",
                        }}
                    >
                        <div
                            style={{
                                display: "flex",
                                alignItems: "flex-start",
                                justifyContent: "space-between",
                                position: "relative",
                                width: "100%",
                                marginBottom: isMobile ? "6px" : "8px",
                            }}
                        >
                            <div
                                style={{
                                    position: "absolute",
                                    top: isMobile
                                        ? "20px"
                                        : isTablet
                                          ? "22.5px"
                                          : "25px",
                                    left: isMobile
                                        ? "20px"
                                        : isTablet
                                          ? "22.5px"
                                          : "25px",
                                    right: isMobile
                                        ? "20px"
                                        : isTablet
                                          ? "22.5px"
                                          : "25px",
                                    height: isMobile ? "3px" : "4px",
                                    background: "#e5e5e5",
                                    borderRadius: "2px",
                                    zIndex: 1,
                                }}
                            />
                            <div
                                style={{
                                    position: "absolute",
                                    top: isMobile
                                        ? "20px"
                                        : isTablet
                                          ? "22.5px"
                                          : "25px",
                                    left: isMobile
                                        ? "20px"
                                        : isTablet
                                          ? "22.5px"
                                          : "25px",
                                    width: `${Math.min(((currentStep - 1) / 3) * 100, 100)}%`,
                                    maxWidth: `calc(100% - ${isMobile ? "40px" : isTablet ? "45px" : "50px"})`,
                                    height: isMobile ? "3px" : "4px",
                                    background: "#004aad",
                                    borderRadius: "2px",
                                    zIndex: 2,
                                    transition: "width 0.3s ease",
                                }}
                            />
                            {[1, 2, 3, 4].map((step) => (
                                <div
                                    key={step}
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        justifyContent: "space-between",
                                        alignItems: "center",
                                        position: "relative",
                                        zIndex: 3,
                                        flex: "1",
                                        minWidth: "0",
                                    }}
                                >
                                    <div
                                        style={{
                                            width: isMobile
                                                ? "40px"
                                                : isTablet
                                                  ? "45px"
                                                  : "50px",
                                            height: isMobile
                                                ? "40px"
                                                : isTablet
                                                  ? "45px"
                                                  : "50px",
                                            borderRadius: "50%",
                                            background:
                                                step <= currentStep
                                                    ? "#004aad"
                                                    : "white",
                                            color:
                                                step <= currentStep
                                                    ? "white"
                                                    : "#999",
                                            border:
                                                step <= currentStep
                                                    ? "none"
                                                    : `${isMobile ? "2px" : "3px"} solid #e5e5e5`,
                                            display: "flex",
                                            alignItems: "center",
                                            justifyContent: "center",
                                            fontWeight: "700",
                                            fontSize: isMobile
                                                ? "14px"
                                                : isTablet
                                                  ? "16px"
                                                  : "18px",
                                        }}
                                    >
                                        {step <= currentStep
                                            ? step < currentStep
                                                ? "‚úì"
                                                : step
                                            : step}
                                    </div>
                                </div>
                            ))}
                        </div>
                        <div
                            style={{
                                display: "flex",
                                alignItems: "center",
                                width: "100%",
                            }}
                        >
                            {[1, 2, 3, 4].map((step) => (
                                <div
                                    key={step}
                                    style={{
                                        flex: "1",
                                        textAlign: "center",
                                        minWidth: "0",
                                    }}
                                >
                                    <div
                                        style={{
                                            fontSize: fontSize.small,
                                            color:
                                                step <= currentStep
                                                    ? "#004aad"
                                                    : "#999",
                                            fontWeight:
                                                step === currentStep
                                                    ? "600"
                                                    : "400",
                                        }}
                                    >
                                        B∆∞·ªõc {step}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    <AnimatePresence mode="wait">
                        <motion.div
                            key={currentStep}
                            initial={{ opacity: 0, x: 30 }}
                            animate={{ opacity: 1, x: 0 }}
                            exit={{ opacity: 0, x: -30 }}
                            transition={{ duration: 0.4 }}
                            style={{
                                minHeight: isMobile
                                    ? "280px"
                                    : isTablet
                                      ? "320px"
                                      : "360px",
                                padding: `0 ${spacing.formContent}`,
                            }}
                        >
                            {/* Step 1: Course & Schedule */}
                            {currentStep === 1 && (
                                <div>
                                    <h3
                                        style={{
                                            color: "#004aad",
                                            marginBottom: isMobile
                                                ? "20px"
                                                : isTablet
                                                  ? "24px"
                                                  : "30px",
                                            fontSize: fontSize.heading,
                                            fontWeight: "700",
                                        }}
                                    >
                                        Ch·ªçn Kh√≥a H·ªçc & L·ªãch H·ªçc
                                    </h3>
                                    <div
                                        style={{
                                            marginBottom: isMobile
                                                ? "20px"
                                                : isTablet
                                                  ? "24px"
                                                  : "30px",
                                        }}
                                    >
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: isMobile
                                                    ? "8px"
                                                    : "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: fontSize.body,
                                            }}
                                        >
                                            Kh√≥a h·ªçc b·∫°n mu·ªën tham gia *
                                        </label>
                                        <div
                                            style={{
                                                display: "grid",
                                                gap: isMobile
                                                    ? "12px"
                                                    : isTablet
                                                      ? "14px"
                                                      : "16px",
                                                gridTemplateColumns: isMobile
                                                    ? "1fr"
                                                    : isTablet
                                                      ? "repeat(2, 1fr)"
                                                      : "1fr",
                                            }}
                                        >
                                            {courseOptions.map((option) => (
                                                <motion.div
                                                    key={option.value}
                                                    onClick={() =>
                                                        updateFormData(
                                                            "course",
                                                            option.value
                                                        )
                                                    }
                                                    style={{
                                                        padding: isMobile
                                                            ? "16px"
                                                            : isTablet
                                                              ? "18px"
                                                              : "20px",
                                                        border:
                                                            formData.course ===
                                                            option.value
                                                                ? "3px solid #004aad"
                                                                : "2px solid #e5e5e5",
                                                        borderRadius: isMobile
                                                            ? "8px"
                                                            : "12px",
                                                        cursor: "pointer",
                                                        background:
                                                            formData.course ===
                                                            option.value
                                                                ? "#f0f7ff"
                                                                : "white",
                                                    }}
                                                    whileHover={{
                                                        scale: isMobile
                                                            ? 1.01
                                                            : 1.02,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                >
                                                    <div
                                                        style={{
                                                            fontWeight: "700",
                                                            color: "#333",
                                                            marginBottom: "6px",
                                                            fontSize:
                                                                fontSize.body,
                                                        }}
                                                    >
                                                        {option.label}
                                                    </div>
                                                    <div
                                                        style={{
                                                            fontSize: isMobile
                                                                ? "13px"
                                                                : "14px",
                                                            color: "#666",
                                                        }}
                                                    >
                                                        {option.desc}
                                                    </div>
                                                </motion.div>
                                            ))}
                                        </div>
                                        {errors.course && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.course}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "30px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Khung gi·ªù h·ªçc *
                                        </label>
                                        <select
                                            value={formData.schedule}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "schedule",
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.schedule
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                                background: "white",
                                            }}
                                        >
                                            <option value="">
                                                Ch·ªçn khung gi·ªù h·ªçc
                                            </option>
                                            {scheduleOptions.map((opt) => (
                                                <option key={opt} value={opt}>
                                                    {opt}
                                                </option>
                                            ))}
                                        </select>
                                        {errors.schedule && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.schedule}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "20px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            ƒêi·ªÉm SAT hi·ªán t·∫°i (n·∫øu c√≥)
                                        </label>
                                        <input
                                            type="number"
                                            value={formData.satScore}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "satScore",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="V√≠ d·ª•: 1200"
                                            min="400"
                                            max="1600"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.satScore
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.satScore && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.satScore}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "20px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            M√£ Voucher (n·∫øu c√≥)
                                        </label>
                                        <input
                                            type="text"
                                            value={formData.voucherCode}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "voucherCode",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Nh·∫≠p m√£ voucher"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                    </div>
                                </div>
                            )}

                            {/* Step 2: Personal Info */}
                            {currentStep === 2 && (
                                <div>
                                    <h3
                                        style={{
                                            color: "#004aad",
                                            marginBottom: "30px",
                                            fontSize: "24px",
                                            fontWeight: "700",
                                        }}
                                    >
                                        Th√¥ng Tin C√° Nh√¢n
                                    </h3>
                                    <div
                                        style={{
                                            display: "grid",
                                            gridTemplateColumns: "1fr 1fr",
                                            gap: "20px",
                                            marginBottom: "25px",
                                        }}
                                    >
                                        <div>
                                            <label
                                                style={{
                                                    display: "block",
                                                    marginBottom: "12px",
                                                    fontWeight: "600",
                                                    color: "#333",
                                                    fontSize: "16px",
                                                }}
                                            >
                                                H·ªç *
                                            </label>
                                            <input
                                                type="text"
                                                value={formData.firstName}
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "firstName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="Nh·∫≠p h·ªç"
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.firstName
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                }}
                                            />
                                            {errors.firstName && (
                                                <div
                                                    style={{
                                                        color: "#dc2626",
                                                        fontSize: "14px",
                                                        marginTop: "8px",
                                                    }}
                                                >
                                                    {errors.firstName}
                                                </div>
                                            )}
                                        </div>
                                        <div>
                                            <label
                                                style={{
                                                    display: "block",
                                                    marginBottom: "12px",
                                                    fontWeight: "600",
                                                    color: "#333",
                                                    fontSize: "16px",
                                                }}
                                            >
                                                T√™n *
                                            </label>
                                            <input
                                                type="text"
                                                value={formData.lastName}
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "lastName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="Nh·∫≠p t√™n"
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.lastName
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                }}
                                            />
                                            {errors.lastName && (
                                                <div
                                                    style={{
                                                        color: "#dc2626",
                                                        fontSize: "14px",
                                                        marginTop: "8px",
                                                    }}
                                                >
                                                    {errors.lastName}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            NƒÉm sinh *
                                        </label>
                                        <input
                                            type="number"
                                            value={formData.birthYear}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "birthYear",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="V√≠ d·ª•: 2005"
                                            min="1990"
                                            max="2015"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.birthYear
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.birthYear && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.birthYear}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            ƒê·ªãa ch·ªâ Email *
                                        </label>
                                        <input
                                            type="email"
                                            value={formData.email}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "email",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="example@gmail.com"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.email
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.email && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.email}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            S·ªë ƒëi·ªán tho·∫°i *
                                        </label>
                                        <input
                                            type="tel"
                                            value={formData.phone}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "phone",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="0123456789 ho·∫∑c +84123456789"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.phone
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.phone && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.phone}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "20px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Link Facebook
                                        </label>
                                        <input
                                            type="url"
                                            value={formData.facebookLink}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "facebookLink",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="https://facebook.com/username"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.facebookLink
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.facebookLink && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.facebookLink}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* Step 3: Location & Discovery */}
                            {currentStep === 3 && (
                                <div>
                                    <h3
                                        style={{
                                            color: "#004aad",
                                            marginBottom: "30px",
                                            fontSize: "24px",
                                            fontWeight: "700",
                                        }}
                                    >
                                        Th√¥ng Tin H·ªçc T·∫≠p
                                    </h3>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Qu·ªëc gia b·∫°n ƒëang h·ªçc t·∫≠p *
                                        </label>
                                        <select
                                            value={formData.country}
                                            onChange={(e) =>
                                                handleCountryChange(
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.country
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                                background: "white",
                                            }}
                                        >
                                            <option value="">
                                                Ch·ªçn qu·ªëc gia
                                            </option>
                                            {countries.map((c) => (
                                                <option key={c} value={c}>
                                                    {c}
                                                </option>
                                            ))}
                                        </select>
                                        {errors.country && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.country}
                                            </div>
                                        )}
                                    </div>
                                    {formData.country === "Kh√°c" && (
                                        <div style={{ marginBottom: "25px" }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    marginBottom: "12px",
                                                    fontWeight: "600",
                                                    color: "#333",
                                                    fontSize: "16px",
                                                }}
                                            >
                                                T√™n qu·ªëc gia *
                                            </label>
                                            <input
                                                type="text"
                                                value={formData.customCountry}
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "customCountry",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="Nh·∫≠p t√™n qu·ªëc gia"
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.customCountry
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                }}
                                            />
                                            {errors.customCountry && (
                                                <div
                                                    style={{
                                                        color: "#dc2626",
                                                        fontSize: "14px",
                                                        marginTop: "8px",
                                                    }}
                                                >
                                                    {errors.customCountry}
                                                </div>
                                            )}
                                        </div>
                                    )}
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            T·ªânh th√†nh / bang *
                                        </label>
                                        {availableStates.length > 0 ? (
                                            <select
                                                value={formData.state}
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "state",
                                                        e.target.value
                                                    )
                                                }
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.state
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                    background: "white",
                                                }}
                                            >
                                                <option value="">
                                                    Ch·ªçn t·ªânh th√†nh / bang
                                                </option>
                                                {availableStates.map((s) => (
                                                    <option key={s} value={s}>
                                                        {s}
                                                    </option>
                                                ))}
                                            </select>
                                        ) : (
                                            <input
                                                type="text"
                                                value={formData.state}
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "state",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="Nh·∫≠p t·ªânh th√†nh / bang"
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.state
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                }}
                                            />
                                        )}
                                        {errors.state && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.state}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Tr∆∞·ªùng b·∫°n ƒëang theo h·ªçc *
                                        </label>
                                        <input
                                            type="text"
                                            value={formData.school}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "school",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="V√≠ d·ª•: THPT Chuy√™n L√™ Qu√Ω ƒê√¥n"
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.school
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                            }}
                                        />
                                        {errors.school && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.school}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            B·∫°n bi·∫øt ƒë·∫øn QAS Academy qua ƒë√¢u *
                                        </label>
                                        <select
                                            value={formData.discoverySource}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "discoverySource",
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.discoverySource
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                                background: "white",
                                            }}
                                        >
                                            <option value="">
                                                Ch·ªçn ngu·ªìn th√¥ng tin
                                            </option>
                                            {discoveryOptions.map((o) => (
                                                <option key={o} value={o}>
                                                    {o}
                                                </option>
                                            ))}
                                        </select>
                                        {errors.discoverySource && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.discoverySource}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "20px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá b·∫°n qua
                                            h√¨nh th·ª©c n√†o * (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)
                                        </label>
                                        <div
                                            style={{
                                                display: "grid",
                                                gridTemplateColumns: "1fr 1fr",
                                                gap: "16px",
                                            }}
                                        >
                                            {contactMethodOptions.map((m) => (
                                                <motion.div
                                                    key={m.value}
                                                    onClick={() =>
                                                        toggleContactMethod(
                                                            m.value
                                                        )
                                                    }
                                                    style={{
                                                        padding: "16px",
                                                        border: formData.contactMethods.includes(
                                                            m.value
                                                        )
                                                            ? "2px solid #004aad"
                                                            : "2px solid #e5e5e5",
                                                        borderRadius: "12px",
                                                        cursor: "pointer",
                                                        textAlign: "center",
                                                        background:
                                                            formData.contactMethods.includes(
                                                                m.value
                                                            )
                                                                ? "#f0f7ff"
                                                                : "white",
                                                        fontWeight: "600",
                                                    }}
                                                    whileHover={{ scale: 1.02 }}
                                                    whileTap={{ scale: 0.98 }}
                                                >
                                                    {m.label}
                                                    {formData.contactMethods.includes(
                                                        m.value
                                                    ) && (
                                                        <span
                                                            style={{
                                                                marginLeft:
                                                                    "8px",
                                                                color: "#004aad",
                                                            }}
                                                        >
                                                            ‚úì
                                                        </span>
                                                    )}
                                                </motion.div>
                                            ))}
                                        </div>
                                        {errors.contactMethods && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.contactMethods}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* Step 4: Goals */}
                            {currentStep === 4 && (
                                <div>
                                    <h3
                                        style={{
                                            color: "#004aad",
                                            marginBottom: "30px",
                                            fontSize: "24px",
                                            fontWeight: "700",
                                        }}
                                    >
                                        M·ª•c Ti√™u H·ªçc T·∫≠p
                                    </h3>
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            M·ª•c ƒë√≠ch h·ªçc SAT *
                                        </label>
                                        <select
                                            value={formData.learningPurpose}
                                            onChange={(e) =>
                                                handleLearningPurposeChange(
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.learningPurpose
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                                background: "white",
                                            }}
                                        >
                                            <option value="">
                                                Ch·ªçn m·ª•c ƒë√≠ch h·ªçc
                                            </option>
                                            <option value="X√©t tuy·ªÉn ƒê·∫°i h·ªçc trong n∆∞·ªõc">
                                                X√©t tuy·ªÉn ƒê·∫°i h·ªçc trong n∆∞·ªõc
                                            </option>
                                            <option value="X√©t tuy·ªÉn ƒê·∫°i h·ªçc Mƒ©">
                                                X√©t tuy·ªÉn ƒê·∫°i h·ªçc Mƒ©
                                            </option>
                                            <option value="X√©t tuy·ªÉn ƒê·∫°i h·ªçc √öc">
                                                X√©t tuy·ªÉn ƒê·∫°i h·ªçc √öc
                                            </option>
                                            <option value="X√©t tuy·ªÉn ƒê·∫°i h·ªçc Canada">
                                                X√©t tuy·ªÉn ƒê·∫°i h·ªçc Canada
                                            </option>
                                            <option value="X√©t tuy·ªÉn ƒê·∫°i h·ªçc Anh">
                                                X√©t tuy·ªÉn ƒê·∫°i h·ªçc Anh
                                            </option>
                                            <option value="Other">Kh√°c</option>
                                        </select>
                                        {errors.learningPurpose && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.learningPurpose}
                                            </div>
                                        )}
                                    </div>
                                    {formData.learningPurpose === "Other" && (
                                        <div style={{ marginBottom: "25px" }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    marginBottom: "12px",
                                                    fontWeight: "600",
                                                    color: "#333",
                                                    fontSize: "16px",
                                                }}
                                            >
                                                M·ª•c ƒë√≠ch h·ªçc kh√°c *
                                            </label>
                                            <input
                                                type="text"
                                                value={
                                                    formData.customLearningPurpose
                                                }
                                                onChange={(e) =>
                                                    updateFormData(
                                                        "customLearningPurpose",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="Nh·∫≠p m·ª•c ƒë√≠ch h·ªçc c·ªßa b·∫°n"
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: errors.customLearningPurpose
                                                        ? "2px solid #dc2626"
                                                        : "2px solid #e5e5e5",
                                                    borderRadius: "12px",
                                                    fontSize: "16px",
                                                }}
                                            />
                                            {errors.customLearningPurpose && (
                                                <div
                                                    style={{
                                                        color: "#dc2626",
                                                        fontSize: "14px",
                                                        marginTop: "8px",
                                                    }}
                                                >
                                                    {
                                                        errors.customLearningPurpose
                                                    }
                                                </div>
                                            )}
                                        </div>
                                    )}
                                    <div style={{ marginBottom: "25px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "12px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Th·ªùi gian d·ª± ki·∫øn thi SAT *
                                        </label>
                                        <select
                                            value={formData.testDate}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "testDate",
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "16px",
                                                border: errors.testDate
                                                    ? "2px solid #dc2626"
                                                    : "2px solid #e5e5e5",
                                                borderRadius: "12px",
                                                fontSize: "16px",
                                                background: "white",
                                            }}
                                        >
                                            <option value="">
                                                Ch·ªçn th·ªùi gian thi
                                            </option>
                                            <option value="Th√°ng 06/2025">
                                                Th√°ng 06/2025
                                            </option>
                                            <option value="Th√°ng 08/2025">
                                                Th√°ng 08/2025
                                            </option>
                                            <option value="Th√°ng 09/2025">
                                                Th√°ng 09/2025
                                            </option>
                                            <option value="Th√°ng 11/2025">
                                                Th√°ng 11/2025
                                            </option>
                                            <option value="Th√°ng 12/2025">
                                                Th√°ng 12/2025
                                            </option>
                                            <option value="2026+">2026+</option>
                                            <option value="Ch∆∞a x√°c ƒë·ªãnh">
                                                Ch∆∞a x√°c ƒë·ªãnh
                                            </option>
                                        </select>
                                        {errors.testDate && (
                                            <div
                                                style={{
                                                    color: "#dc2626",
                                                    fontSize: "14px",
                                                    marginTop: "8px",
                                                }}
                                            >
                                                {errors.testDate}
                                            </div>
                                        )}
                                    </div>
                                    <div style={{ marginBottom: "20px" }}>
                                        <label
                                            style={{
                                                display: "block",
                                                marginBottom: "16px",
                                                fontWeight: "600",
                                                color: "#333",
                                                fontSize: "16px",
                                            }}
                                        >
                                            M·ª©c ƒëi·ªÉm SAT mong mu·ªën:{" "}
                                            {formData.targetScore}
                                        </label>
                                        <input
                                            type="range"
                                            min="1300"
                                            max="1600"
                                            step="50"
                                            value={formData.targetScore}
                                            onChange={(e) =>
                                                updateFormData(
                                                    "targetScore",
                                                    parseInt(e.target.value)
                                                )
                                            }
                                            style={{
                                                width: "100%",
                                                height: "8px",
                                                borderRadius: "4px",
                                                background: `linear-gradient(to right, #004aad 0%, #004aad ${((formData.targetScore - 1300) / (1600 - 1300)) * 100}%, #e5e5e5 ${((formData.targetScore - 1300) / (1600 - 1300)) * 100}%, #e5e5e5 100%)`,
                                            }}
                                        />
                                    </div>
                                    {rateLimitError && (
                                        <motion.div
                                            initial={{ opacity: 0, y: 10 }}
                                            animate={{ opacity: 1, y: 0 }}
                                            style={{
                                                marginTop: "20px",
                                                padding: "16px",
                                                background: "#fef2f2",
                                                border: "2px solid #fecaca",
                                                borderRadius: "12px",
                                                color: "#dc2626",
                                                fontSize: "16px",
                                                fontWeight: "600",
                                                textAlign: "center",
                                            }}
                                        >
                                            ‚ö†Ô∏è {rateLimitError}
                                        </motion.div>
                                    )}
                                </div>
                            )}
                        </motion.div>
                    </AnimatePresence>

                    {/* Navigation */}
                    <motion.div
                        style={{
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            marginTop: isMobile
                                ? "24px"
                                : isTablet
                                  ? "32px"
                                  : "40px",
                            paddingTop: isMobile
                                ? "20px"
                                : isTablet
                                  ? "24px"
                                  : "30px",
                            paddingLeft: spacing.formContent,
                            paddingRight: spacing.formContent,
                            borderTop: "2px solid #f0f0f0",
                            flexDirection: isMobile ? "column" : "row",
                            gap: isMobile ? "16px" : "0",
                        }}
                    >
                        <motion.button
                            onClick={prevStep}
                            disabled={currentStep === 1}
                            style={{
                                padding: isMobile
                                    ? "14px 24px"
                                    : isTablet
                                      ? "15px 28px"
                                      : "16px 32px",
                                border: "2px solid #e5e5e5",
                                borderRadius: isMobile ? "8px" : "12px",
                                background: "white",
                                color: "#666",
                                fontWeight: 600,
                                cursor:
                                    currentStep === 1
                                        ? "not-allowed"
                                        : "pointer",
                                opacity: currentStep === 1 ? 0.5 : 1,
                                width: isMobile ? "100%" : "auto",
                                order: isMobile ? 2 : 1,
                            }}
                        >
                            ‚Üê Quay l·∫°i
                        </motion.button>
                        {currentStep < 4 ? (
                            <motion.button
                                onClick={nextStep}
                                style={{
                                    padding: isMobile
                                        ? "14px 24px"
                                        : isTablet
                                          ? "15px 28px"
                                          : "16px 32px",
                                    border: "none",
                                    borderRadius: isMobile ? "8px" : "12px",
                                    background:
                                        "linear-gradient(135deg, #004aad 0%, #0066cc 100%)",
                                    color: "white",
                                    fontWeight: 700,
                                    cursor: "pointer",
                                    width: isMobile ? "100%" : "auto",
                                    order: isMobile ? 1 : 2,
                                }}
                            >
                                Ti·∫øp theo ‚Üí
                            </motion.button>
                        ) : (
                            <motion.button
                                onClick={submitForm}
                                disabled={isSubmitting || !!rateLimitError}
                                style={{
                                    padding: isMobile
                                        ? "14px 24px"
                                        : isTablet
                                          ? "15px 32px"
                                          : "16px 40px",
                                    border: "none",
                                    borderRadius: isMobile ? "8px" : "12px",
                                    background:
                                        isSubmitting || rateLimitError
                                            ? "#ccc"
                                            : "linear-gradient(135deg, #004aad 0%, #0066cc 100%)",
                                    color: "white",
                                    fontWeight: 700,
                                    cursor:
                                        isSubmitting || rateLimitError
                                            ? "not-allowed"
                                            : "pointer",
                                    width: isMobile ? "100%" : "auto",
                                    order: isMobile ? 1 : 2,
                                }}
                            >
                                {isSubmitting
                                    ? "ƒêang g·ª≠i..."
                                    : rateLimitError
                                      ? "T·∫°m th·ªùi kh√¥ng th·ªÉ g·ª≠i"
                                      : "Ho√†n th√†nh ƒëƒÉng k√Ω üöÄ"}
                            </motion.button>
                        )}
                    </motion.div>
                </div>
            </motion.div>
        </div>
    )
}

addPropertyControls(QASLeadManagementForm, {
    supabaseUrl: {
        type: ControlType.String,
        title: "Supabase URL",
        defaultValue: "https://gzgebiosasfyzwwkrsof.supabase.co",
    },
    supabaseAnonKey: {
        type: ControlType.String,
        title: "Supabase Anon Key",
        defaultValue:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd6Z2ViaW9zYXNmeXp3d2tyc29mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwNTg4NjcsImV4cCI6MjA3NDYzNDg2N30.XNI4MJecZPAK87i8I1pHoiAYBcYNDZcCoEjaikPuA60",
    },
    n8nUrl: {
        type: ControlType.String,
        title: "N8N Webhook URL",
        defaultValue: "https://n8n-280z.onrender.com",
    },
})
